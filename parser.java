
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\010\000\002\002\004\000\002\006" +
    "\004\000\002\006\003\000\002\003\005\000\002\003\005" +
    "\000\002\007\006\000\002\007\006\000\002\007\004\000" +
    "\002\007\004\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\005\004\000\002\005\003\000\002\010" +
    "\011\000\002\004\012\000\002\004\003\000\002\012\004" +
    "\000\002\012\003\000\002\014\010\000\002\014\006\000" +
    "\002\013\003\000\002\013\005\000\002\013\010\000\002" +
    "\013\003\000\002\017\006\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\015\003\000\002\015\005" +
    "\000\002\015\005\000\002\016\003\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\004\000\002" +
    "\016\005\000\002\016\005\000\002\020\003\000\002\020" +
    "\005\000\002\021\003\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\004\031\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\013\010\001\002\000\006\005\012\006\014\001" +
    "\002\000\010\005\025\006\030\007\026\001\002\000\004" +
    "\013\020\001\002\000\010\005\012\006\014\007\ufffe\001" +
    "\002\000\004\013\015\001\002\000\004\033\016\001\002" +
    "\000\010\005\ufffc\006\ufffc\007\ufffc\001\002\000\010\005" +
    "\uffff\006\uffff\007\uffff\001\002\000\004\033\021\001\002" +
    "\000\010\005\ufffd\006\ufffd\007\ufffd\001\002\000\012\005" +
    "\ufff0\006\ufff0\007\ufff0\032\ufff0\001\002\000\004\032\146" +
    "\001\002\000\012\005\025\006\030\007\026\032\ufff3\001" +
    "\002\000\004\013\ufff7\001\002\000\006\013\ufff5\036\137" +
    "\001\002\000\004\013\031\001\002\000\004\013\ufff6\001" +
    "\002\000\004\027\032\001\002\000\006\005\034\006\035" +
    "\001\002\000\004\030\044\001\002\000\004\013\041\001" +
    "\002\000\004\013\036\001\002\000\006\030\ufff8\034\037" +
    "\001\002\000\006\005\034\006\035\001\002\000\004\030" +
    "\ufffa\001\002\000\006\030\ufff9\034\042\001\002\000\006" +
    "\005\034\006\035\001\002\000\004\030\ufffb\001\002\000" +
    "\004\031\045\001\002\000\012\010\055\013\046\015\047" +
    "\035\054\001\002\000\004\026\134\001\002\000\014\012" +
    "\057\013\066\014\064\016\067\027\060\001\002\000\016" +
    "\010\uffeb\013\uffeb\015\uffeb\032\uffeb\033\uffeb\035\uffeb\001" +
    "\002\000\020\010\uffe8\011\127\013\uffe8\015\uffe8\032\uffe8" +
    "\033\uffe8\035\uffe8\001\002\000\016\010\uffee\013\uffee\015" +
    "\uffee\032\uffee\033\uffee\035\uffee\001\002\000\014\010\055" +
    "\013\046\015\047\032\126\035\054\001\002\000\004\027" +
    "\121\001\002\000\004\027\056\001\002\000\014\012\057" +
    "\013\066\014\064\016\067\027\060\001\002\000\024\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\030\uffd7\033\uffd7\001\002\000\014\012\057\013\066\014" +
    "\064\016\067\027\060\001\002\000\024\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\030\uffe4\033" +
    "\uffe4\001\002\000\024\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\030\uffe3\033\uffe3\001\002\000" +
    "\024\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\030\uffe0\033\uffe0\001\002\000\024\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\030\uffd9" +
    "\033\uffd9\001\002\000\022\017\072\020\077\021\074\022" +
    "\100\023\073\024\075\025\076\030\110\001\002\000\024" +
    "\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\030\uffe6\033\uffe6\001\002\000\014\012\057\013\066" +
    "\014\064\016\067\027\060\001\002\000\024\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\030\uffe5" +
    "\033\uffe5\001\002\000\024\017\uffdc\020\uffdc\021\074\022" +
    "\100\023\073\024\075\025\076\030\uffdc\033\uffdc\001\002" +
    "\000\014\012\057\013\066\014\064\016\067\027\060\001" +
    "\002\000\014\012\057\013\066\014\064\016\067\027\060" +
    "\001\002\000\014\012\057\013\066\014\064\016\067\027" +
    "\060\001\002\000\014\012\057\013\066\014\064\016\067" +
    "\027\060\001\002\000\014\012\057\013\066\014\064\016" +
    "\067\027\060\001\002\000\014\012\057\013\066\014\064" +
    "\016\067\027\060\001\002\000\014\012\057\013\066\014" +
    "\064\016\067\027\060\001\002\000\024\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\030\uffe1\033" +
    "\uffe1\001\002\000\024\017\uffda\020\uffda\021\074\022\100" +
    "\023\073\024\075\025\076\030\uffda\033\uffda\001\002\000" +
    "\016\017\uffde\020\uffde\021\074\022\100\030\uffde\033\uffde" +
    "\001\002\000\016\017\uffdf\020\uffdf\021\074\022\100\030" +
    "\uffdf\033\uffdf\001\002\000\024\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\030\uffe2\033\uffe2\001" +
    "\002\000\016\017\uffdd\020\uffdd\021\074\022\100\030\uffdd" +
    "\033\uffdd\001\002\000\024\017\uffdb\020\uffdb\021\074\022" +
    "\100\023\073\024\075\025\076\030\uffdb\033\uffdb\001\002" +
    "\000\012\010\055\013\046\015\047\035\054\001\002\000" +
    "\014\010\055\013\046\015\047\033\113\035\054\001\002" +
    "\000\016\010\uffef\013\uffef\015\uffef\032\uffef\033\uffef\035" +
    "\uffef\001\002\000\020\010\uffed\011\uffed\013\uffed\015\uffed" +
    "\032\uffed\033\uffed\035\uffed\001\002\000\022\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\030\120" +
    "\001\002\000\020\017\072\020\077\021\074\022\100\023" +
    "\073\024\075\025\076\001\002\000\022\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\030\117\001" +
    "\002\000\024\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\030\uffd8\033\uffd8\001\002\000\024\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\030\uffd6\033\uffd6\001\002\000\014\012\057\013\066\014" +
    "\064\016\067\027\060\001\002\000\022\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\030\123\001" +
    "\002\000\012\010\055\013\046\015\047\035\054\001\002" +
    "\000\014\010\055\013\046\015\047\033\125\035\054\001" +
    "\002\000\016\010\uffe9\013\uffe9\015\uffe9\032\uffe9\033\uffe9" +
    "\035\uffe9\001\002\000\012\005\ufff1\006\ufff1\007\ufff1\032" +
    "\ufff1\001\002\000\012\010\055\013\046\015\047\035\054" +
    "\001\002\000\014\010\055\013\046\015\047\033\131\035" +
    "\054\001\002\000\020\010\uffec\011\uffec\013\uffec\015\uffec" +
    "\032\uffec\033\uffec\035\uffec\001\002\000\022\017\072\020" +
    "\077\021\074\022\100\023\073\024\075\025\076\033\133" +
    "\001\002\000\016\010\uffea\013\uffea\015\uffea\032\uffea\033" +
    "\uffea\035\uffea\001\002\000\014\012\057\013\066\014\064" +
    "\016\067\027\060\001\002\000\022\017\072\020\077\021" +
    "\074\022\100\023\073\024\075\025\076\033\136\001\002" +
    "\000\016\010\uffe7\013\uffe7\015\uffe7\032\uffe7\033\uffe7\035" +
    "\uffe7\001\002\000\004\027\140\001\002\000\004\030\141" +
    "\001\002\000\004\031\142\001\002\000\012\010\055\013" +
    "\046\015\047\035\054\001\002\000\014\010\055\013\046" +
    "\015\047\032\144\035\054\001\002\000\012\005\ufff2\006" +
    "\ufff2\007\ufff2\032\ufff2\001\002\000\004\032\ufff4\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\012\006\010\001\001\000\012\004\023\005\022\010" +
    "\021\011\026\001\001\000\002\001\001\000\006\003\012" +
    "\006\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\023\005\144\010\021\011\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\052\013\051\014\050\017\047\001\001" +
    "\000\002\001\001\000\014\015\067\016\060\020\061\021" +
    "\062\022\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\111\014\050\017\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\067" +
    "\016\060\020\061\021\062\022\064\001\001\000\002\001" +
    "\001\000\014\015\115\016\113\020\061\021\062\022\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\067\016\060\020\061\021\062\022\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\067" +
    "\016\060\020\061\021\062\022\106\001\001\000\014\015" +
    "\067\016\060\020\061\021\062\022\105\001\001\000\014" +
    "\015\067\016\060\020\061\021\062\022\104\001\001\000" +
    "\014\015\067\016\060\020\061\021\062\022\103\001\001" +
    "\000\014\015\067\016\060\020\061\021\062\022\102\001" +
    "\001\000\014\015\067\016\060\020\061\021\062\022\101" +
    "\001\001\000\014\015\067\016\060\020\061\021\062\022" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\110\013\051\014\050" +
    "\017\047\001\001\000\010\013\111\014\050\017\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\067\016\121\020\061\021\062" +
    "\022\114\001\001\000\002\001\001\000\012\012\123\013" +
    "\051\014\050\017\047\001\001\000\010\013\111\014\050" +
    "\017\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\127\013\051\014\050\017\047\001\001\000\010" +
    "\013\111\014\050\017\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\015\067\016\060" +
    "\020\061\021\062\022\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\142\013\051\014\050\017\047\001" +
    "\001\000\010\013\111\014\050\017\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
    	System.out.println("Syntax error at line " + (current_token.left + 1) + ", column " + current_token.right);
        System.out.println("Current token: " + current_token.sym);
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right, null
        );
    }
    
    private int tempCount = 0;

    private int labelCount = 0;

    private String newTemp() {
        return "t" + (tempCount++);
    }

    private String newLabel() {
        return "L" + (labelCount++);
    }

    List<NodeTac> TACList = new ArrayList<>(); 

    // Lista para armazenar a tabela de simbolos
    List<SimbolosTable> tabelaSimbolos = new ArrayList<>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // declaracaoClasse ::= CHAVEESQ CLASSE ID atributos metodos CHAVEDIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoClasse",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= declaracaoClasse EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // atributos ::= declaracaoAtributo atributos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // atributos ::= declaracaoAtributo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracaoAtributo ::= BOOL ID PONTOEVIRGULA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SimbolosTable atributo = new SimbolosTable(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoAtributo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracaoAtributo ::= INT ID PONTOEVIRGULA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SimbolosTable atributo = new SimbolosTable(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoAtributo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // argumentos ::= BOOL ID VIRGULA argumentos 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    SimbolosTable atributo = new SimbolosTable(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // argumentos ::= INT ID VIRGULA argumentos 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    SimbolosTable atributo = new SimbolosTable(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // argumentos ::= BOOL ID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    SimbolosTable atributo = new SimbolosTable(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // argumentos ::= INT ID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    SimbolosTable atributo = new SimbolosTable(tipo.toString(), id.toString());
    tabelaSimbolos.add(atributo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoMetodo ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipoMetodo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipoMetodo ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoMetodo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // metodos ::= declaracaoMetodo metodos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // metodos ::= declaracaoMetodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // main ::= VOID MAIN PARESQ PARDIR CHAVEESQ comandos CHAVEDIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracaoMetodo ::= tipoMetodo ID PARESQ argumentos PARDIR CHAVEESQ comandos CHAVEDIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoMetodo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracaoMetodo ::= main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracaoMetodo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comandos ::= comandos comando 
            {
              NodeTac RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeTac com = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new NodeTac(com.place, com.code, "comandos1");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comandos ::= comando 
            {
              NodeTac RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeTac com = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new NodeTac(com.place, com.code, "comandos");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ifSemElse ::= IF PARESQ termo PARDIR comandos PONTOEVIRGULA 
            {
              NodeTac RESULT =null;
		int termoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int termoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodeTac termo = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeTac body = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    String trueLabel = newLabel();   

    String code = "if"+termo.code+"goto("+trueLabel+")"+body.code;

    RESULT = new NodeTac(null, code, "ifSemElse"); 

    TACList.add(RESULT);  

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifSemElse",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ifSemElse ::= ifSemElse ELSE comandos PONTOEVIRGULA 
            {
              NodeTac RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeTac body = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    String falseLabel = newLabel();  

    String code = falseLabel + ":"+body.code;

    RESULT = new NodeTac(null, code, "ifSemElse"); 

    TACList.add(RESULT);  
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifSemElse",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comando ::= comandoAritmetico 
            {
              NodeTac RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeTac com = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new NodeTac(com.place, com.code, "comando");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comando ::= RETORNO termo PONTOEVIRGULA 
            {
              NodeTac RESULT =null;
		int termoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int termoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeTac termo = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new NodeTac(termo.place, termo.code, "comando");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comando ::= WHILE PARESQ expressaoBooleana PARDIR comandos PONTOEVIRGULA 
            {
              NodeTac RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodeTac cond = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeTac body = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    String trueLabel = newLabel();
    String falseLabel = newLabel();

    String code = "";
    
    if(cond.code == null)
        code = trueLabel + ": if not(" + cond.place + ") " + "goto(" + falseLabel + ") " + body.code + "goto(" + trueLabel + ")"+ falseLabel + ":";
    else
        code = trueLabel + ": if not(" + cond.code + ") " + "goto(" + falseLabel + ") " + body.code + "goto(" + trueLabel + ")"+ falseLabel + ":";

    RESULT = new NodeTac(null, code , "comando");

    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comando ::= ifSemElse 
            {
              NodeTac RESULT =null;
		int ifSemElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifSemElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeTac ifSemElse = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new NodeTac(ifSemElse.place, ifSemElse.code, "comando");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comandoAritmetico ::= ID IGUAL termo PONTOEVIRGULA 
            {
              NodeTac RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int termoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int termoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeTac termo = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    int i = -1;
    for(SimbolosTable no: tabelaSimbolos){
        if(no.nome.equals(id.toString())){
            i = tabelaSimbolos.indexOf(no);
            break;
        }
    }
    
    RESULT = new NodeTac(null, "st[" + i +"]" + " := " + termo.place, "termo");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandoAritmetico",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // termo ::= ID 
            {
              NodeTac RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    int i = -1;
    for(SimbolosTable no: tabelaSimbolos){
        if(no.nome.equals(id.toString())){
            i = tabelaSimbolos.indexOf(no);
            break;
        }
    }
    
    RESULT = new NodeTac("st[" + i +"]", null, "termo");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // termo ::= expressaoAritmetica 
            {
              NodeTac RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeTac expr = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new NodeTac(expr.place, expr.code, "expressaoAritmetica");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // termo ::= expressaoBooleana 
            {
              NodeTac RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeTac expr = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new NodeTac(expr.place, expr.code, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressaoAritmetica ::= termoAritmetico 
            {
              NodeTac RESULT =null;
		int termoAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termoAright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeTac termoA = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new NodeTac(termoA.place, termoA.code, "expressaoAritmetica");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoAritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressaoAritmetica ::= termo SOMA termo 
            {
              NodeTac RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeTac t1 = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeTac t2 = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new NodeTac(temp, temp + " := " + t1.place + " + " + t2.place, "expressaoAritmetica");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoAritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expressaoAritmetica ::= termo MULTIPLICACAO termo 
            {
              NodeTac RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeTac t1 = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeTac t2 = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new NodeTac(temp, temp + " := " + t1.place + " * " + t2.place, "expressaoAritmetica");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoAritmetica",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expressaoBooleana ::= termoBooleano 
            {
              NodeTac RESULT =null;
		int termoBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termoBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeTac termoB = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new NodeTac(termoB.place, termoB.code, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expressaoBooleana ::= termo OPMAIOR termo 
            {
              NodeTac RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeTac t1 = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeTac t2 = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new NodeTac(temp, temp + " := " + t1.place + " > " + t2.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expressaoBooleana ::= termo OPMENOR termo 
            {
              NodeTac RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeTac t1 = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeTac t2 = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new NodeTac(temp, temp + " := " + t1.place + " < " + t2.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expressaoBooleana ::= termo OPIGUAL termo 
            {
              NodeTac RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeTac t1 = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeTac t2 = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new NodeTac(temp, temp + " := " + t1.place + " == " + t2.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expressaoBooleana ::= NOT termo 
            {
              NodeTac RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeTac t1 = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new NodeTac(temp, "not " + t1.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expressaoBooleana ::= termo AND termo 
            {
              NodeTac RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeTac t1 = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeTac t2 = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new NodeTac(temp, t1.place + " and " + t2.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expressaoBooleana ::= termo OR termo 
            {
              NodeTac RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeTac t1 = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeTac t2 = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String temp = newTemp();

    RESULT = new NodeTac(temp, t1.place + " or " + t2.place, "expressaoBooleana");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressaoBooleana",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // termoAritmetico ::= NUMERO 
            {
              NodeTac RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new NodeTac(num.toString(), null, "termoAritmetico");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termoAritmetico",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // termoAritmetico ::= PARESQ expressaoAritmetica PARDIR 
            {
              NodeTac RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeTac expr = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new NodeTac(expr.place, expr.code, "termoAritmetico");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termoAritmetico",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // termoBooleano ::= CONSTANTE 
            {
              NodeTac RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new NodeTac(constante.toString(), null, "termoAritmetico");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termoBooleano",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // termoBooleano ::= PARESQ expressaoBooleana PARDIR 
            {
              NodeTac RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeTac expr = (NodeTac)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new NodeTac(expr.place, expr.code, "termoAritmetico");
    TACList.add(RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termoBooleano",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
